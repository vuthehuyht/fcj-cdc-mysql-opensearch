[
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Tổng quan Trong bài lab này, chúng ta sẽ thực hiện việc thu thập sự thay đổi dữ liệu từ RDS MySQL tới Opensearch để có thể phục vụ các yêu cầu khác nhau. Bài lab này chỉ là base cơ bản nhất, các bạn cũng có thể cải thiện hoặc tuỳ chỉnh nó theo các yêu cầu khác nhau để cho hợp lý nhất.\nDưới đây là flow phương pháp RDS MySQL thực hiện tạo mới, cập nhật hay xoá bản ghi EC2 chạy code lắng nghe các sự kiện tạo mới, cập nhật hay xoá bản ghi và đẩy nội dung các sự kiện đó vào Kinesis Data stream được thêm vào Kinesis đồng thời cũng gọi một trigger Lambda với đầu vào nôi dung sự kiện được thêm vào Kinesis Lambda đẩy nội dung đó vào trong OpenSearch đồng thời trả ra url để truy cập đến nội dung đã được thêm Nội dung Giới thiệu Các bước chuẩn bị Triển khai Dọn dẹp tài nguyên Chúng ta cùng bắt tay làm nào. Let\u0026rsquo;s go!!!!\n"
},
{
	"uri": "//localhost:1313/vi/2-prepare/2.1-createvpc/",
	"title": "Tạo VPC",
	"tags": [],
	"description": "",
	"content": "Trên thanh tìm kiếm, tìm và chọn VPC Chọn Create VPC Tại phần name điền cdc hay một cái tên nào đó mà các bạn muốn\nIPv4 CIDR block: điền 10.0.0.0/16 Các phần khác để như mặc định, tại VPC Endpoint, chọn None\nChọn Create VPC "
},
{
	"uri": "//localhost:1313/vi/",
	"title": "Thu thập dữ liệu thay đổi từ RDS sang Opensearch",
	"tags": [],
	"description": "",
	"content": "Thu thập dữ liệu thay đổi từ RDS sang Opensearch Tổng quan Khi các bạn làm việc với database, chắc hẳn các bạn cũng đã từng có suy nghĩ \u0026ldquo;Làm thế nào ta có thể thu thập sự thay đổi của database để phục vụ cho một số mục đích như tìm kiếm, phân tích, bla bla\u0026hellip; ?\u0026rdquo;. Thì trong bài lab này, các bạn sẽ tìm hiểu cách thu thập dữ liệu từ MySQL sang OpenSearch, mặc dù đây không phải là cách tối ưu hay đem lại hiệu năng tốt cho các dự án nhưng nó sẽ đem lại cho các bạn một cái nhìn tổng quan về phương pháp thu thập dữ liệu giữa hai lại database khác nhau hoặc giữa hai hệ quản trị cơ sở dữ liệu. Để biết thêm các phương pháp khác các bạn thể search Google với từ khoá Capture Data Change.\n"
},
{
	"uri": "//localhost:1313/vi/3-deployment/3.1-deploycodeec2/",
	"title": "Triển khai Python code lắng nghe MySQL event",
	"tags": [],
	"description": "",
	"content": "Hãy bảo đảm rằng, trên máy của bạn có cài đặt MobaXTerm. Nếu chưa cài đặt, truy cập link để cài đặt.\nChạy MobaXterm, chọn Session -\u0026gt; SSH\nRemote host: nhập public IP của EC2 đã tạo ở 2.4 Tick Specify username và nhập ubuntu Chọn Advance SSH Settings, tick Use private key và trỏ đường dẫn đến file pem đã tải về tại bước 2.4 Tiến hành cài đặt python 3.12 và pip bằng cách chạy lần lượt các command\nsudo apt install software-properties-common -y\rsudo add-apt-repository ppa:deadsnakes/ppa\rsudo apt udpate\rsudo apt install python3.12 python3-pip -y Tạo file listener.py bằng command vim listener.py, sau đó paste đoạn code sau vào và ấn tổ hợp ESC -\u0026gt; :wq! -\u0026gt; Enter\nimport boto3\rimport json\rfrom pymysqlreplication import BinLogStreamReader\rfrom pymysqlreplication.row_event import (\rDeleteRowsEvent,\rUpdateRowsEvent,\rWriteRowsEvent,\r)\rdef main():\rkinesis = boto3.client(\u0026#34;kinesis\u0026#34;,region_name=\u0026#34;ap-southeast-1\u0026#34;)\rMYSQL_SETTINGS = {\r\u0026#34;host\u0026#34;: \u0026#34;\u0026lt;database endpoint\u0026gt;\u0026#34;,\r\u0026#34;port\u0026#34;: \u0026#34;\u0026lt;database port\u0026gt;\u0026#34;,\r\u0026#34;user\u0026#34;: \u0026#34;\u0026lt;database username\u0026gt;\u0026#34;,\r\u0026#34;passwd\u0026#34;: \u0026#34;database password\u0026#34; }\r\u0026#39;\u0026#39;\u0026#39;\r* server_id is your slave identifier, it should be unique.\r* set blocking to True if you want to block and wait for the next event at\rthe end of the stream\r* only_events will listen only to describes events \u0026#39;\u0026#39;\u0026#39;\rprint(\u0026#34;\u0026gt;\u0026gt;\u0026gt;listener start streaming to:cdc-data-stream\u0026#34;)\rstream = BinLogStreamReader(connection_settings=MYSQL_SETTINGS,\rserver_id=100,\rblocking=True,\rresume_stream=True,\ronly_events=[DeleteRowsEvent, WriteRowsEvent, UpdateRowsEvent])\rfor binlogevent in stream:\rfor row in binlogevent.rows:\rprint(\u0026#34;\u0026gt;\u0026gt;\u0026gt; start event\u0026#34;)\revent = {\u0026#34;schema\u0026#34;: binlogevent.schema,\r\u0026#34;table\u0026#34;: binlogevent.table,\r\u0026#34;type\u0026#34;: type(binlogevent).__name__,\r\u0026#34;row\u0026#34;: row\r}\rprint(\u0026#34;\u0026gt;\u0026gt;\u0026gt;event\u0026#34;,event)\routput = kinesis.put_record(StreamName=\u0026#34;\u0026lt;stream name\u0026gt;\u0026#34;, Data=json.dumps(event), PartitionKey=\u0026#34;default\u0026#34;)\rprint(\u0026#34;\u0026gt;\u0026gt;kinasis output\u0026#34;,output)\rstream.close()\rif __name__ == \u0026#34;__main__\u0026#34;:\rmain() Cập nhật thông tin kết nối đến RDS và Kinesis đã tạo ở bước 2.2 và 2.5\nTạo file để lưu các dependencies vim requirements.txt và paste nội dung sau vào file\nrequests\rboto3\rmysql-replication Tiến hành cài đặt các dependencies bằng command pip install -r requirements.txt\nSau đó, ta chạy thử xem code đã run thành công chưa bằng command python3 listener.py\nKết quả như hình là code đã chạy thành công "
},
{
	"uri": "//localhost:1313/vi/2-prepare/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Trước khi bắt tay vào triển khai phương pháp này, chúng ta điểm qua về một số dịch vụ được sử dụng trong bài lab.\nAWS RDS Đây là một trong những dịch vụ điển hình của AWS, được sử dụng rất nhiều và rộng rãi. Vì nó phổ biến nên chúng ta sẽ tiếp tục với phần khác. Trong bài lab này, RDS sẽ đóng vai trò là source để lấy data.\nAWS Lambda AWS Lambda là một dịch vụ điện toán phi máy chủ, theo định hướng sự kiện (hiểu nôm na là khi nào có request đến thì nó mới chạy), giúp cho chúng ta chạy code hầu hết mọi loại application hoặc backend service mà không cần cung cấp hay quản lý máy chủ. AWS Lambda có thể được kích hoạt từ hơn 200 dịch vụ của AWS và các application dưới dạng SaaS và chúng ta chỉ cần trả phí theo mức sử dụng.\nAWS EC2 Là một cơ sở hạ tầng điện toán đám mây được cung cấp bởi AWS. Trong bài lab, chúng ta chạy doạn code lắng nghe các sự kiện thay đổi từ RDS rồi đẩy vào Kinesis\nAWS VPC Là dịch vụ cho phép khởi tạo các tài nguyên AWS trong một mảng ảo riêng cô lập và được kiểm soát hoàn toàn bởi người dùng.\nAWS Kinesis Data Stream AWS Kinesis là dịch vụ giúp các bạn xây dựng được một ứng dụng có khả năng phần tích và xử lý luồng dữ liệu (stream data) theo thời gian thực (realtime),AWS Kinesis có khả năng thu nhận, lưu trữ đến hàng terabytes data trong một giờ.\nAWS Kinesis có thể nhận data từ nhiều nguồn khác nhau như logs, live stream từ các ứng dụng\u0026hellip;\nHiện tại, AWS Kinesis gồm 4 components như sau:\nKinesis Data Streams: thu thập, xử lý và lưu trữ data stream Kinesis Data Firehorse: load data stream vào AWS data store (ví dụ: S3) Kinesis Data Analytics: phân tích data stream với SQL hoặc Apache Flink Kinesis Video Stream: thu thập, xử lý và lưu trữ data stream Trong bài lab, chúng ta dùng đến Kinesis Data Stream để thu thập và xử lý data rồi đẩy về OpenSearch.\nAWS OpenSearch AWS OpenSearch là một bộ công cụ tìm kiếm và phân tích phân tán, hướng tới cộng đồng, được cấp phép của Apache 2.0, 100% nguồn mở được sử dụng cho hàng loạt các trường hợp như giám sát ứng dụng theo thời gian thực, phân tích bản ghi và tìm kiếm trang web. OpenSearch cung cấp một hệ thống có quy mô linh hoạt để mang tới khả năng truy cập và phản hồi nhanh khối lượng lớn dữ liệu với công cụ trực quan hóa được tích hợp sẵn, OpenSearch Dashboards, giúp người dùng dễ dàng khám phá dữ liệu của họ. OpenSearch được hỗ trợ bởi thư viện tìm kiếm Apache Lucene và nó hỗ trợ hàng loạt các tính năng tìm kiếm và phân tích, chẳng hạn như tìm kiếm lân cận k gần nhất (KNN), SQL, Phát hiện bất thường, Thư viện Machine Learning Commons, Phân tích dấu vết, tìm kiếm toàn văn bản, v.v.\nNội dung Tạo VPC Tạo RDS MySQL Tạo OpenSearch Tạo EC2 Tạo Kinesis Data Stream "
},
{
	"uri": "//localhost:1313/vi/2-prepare/2.2-createrds/",
	"title": "Tạo RDS",
	"tags": [],
	"description": "",
	"content": " Tạo Security Group cho RDS Tại ô tìm kiếm, tìm và chọn \u0026ldquo;Security Groups\u0026rdquo; Tại giao diện vừa chuyển hướng, chọn Create security group Tại ô Security group name, nhập cdc-mysql-sg Tại ô VPC, chọn vpc-cdc Tại mục Inbound rules, chọn Add rule và điền các thông tin như sau:\nType: MySQL/Aurora Source: 0.0.0.0/0 Cuối cùng, chọn Create security group để tạo SG.\nTạo Parameter Group cho RDS MySQL Tại thanh điều hướng bên trái của giao diện RDS, chọn Parameter groups -\u0026gt; Create parameter group ở mục Parameter group family, chọn mysql8.0 ở mục Group Name, nhập cdc-group Chọn Create để tạo. Tạo RDS MySQL Chuyển hướng trang tạo Database\nTrên ô tìm kiếm, tìm và chọn RDS Tại giao diện của RDS\nChọn Create database Thiết lập Database\nChoose a database creation method: chọn Standard create Engine options: chọn MySQL Templates: chọn Free Tier DB instance identifier: điền cdc-database Master password: diền Huyvt2609 Confirm master password: điền Huyvt2609 DB instance class: chọn db.t2.micro Public access: chọn Yes VPC security group (firewall): chọn cdc-rds-sg Tại mục Additional configuration DB parameter group: chọn cdc-group Encryption: bỏ chọn Enable encryption Maintenance: bỏ chọn Enable auto minor version upgrade Các mục khác để mặc định Lưu ý: Quá trình tạo database sẽ diễn ra khá lâu, khoảng 10 phút.\nSau khi tạo xong, chúng ta cần xác nhận đã Enable MySQL bin log:\nKết nối đến RDS bằng terminal: mysql -h rds_enpoint -u admin -p , sau đó nhập password Nhập show global variables like \u0026quot;log_bin\u0026quot;, néu kết quả log_bin ON là ok rồi "
},
{
	"uri": "//localhost:1313/vi/3-deployment/3.2-deploylambda/",
	"title": "Triển khai Lambda",
	"tags": [],
	"description": "",
	"content": "Để triển khai Lambda ta cần tạo user để lấy Access keys\nHãy tạo mới một user với Attach policies directly là AdministratorAccess\nTại giao diện user vừa tạo, chọn tab Security Credentials\nTại mục Access kyes, chọn Create access key Chọn Command Line Interface (CLI)\nTick vào I understand the above recommendation and want to proceed to create an access key. Nhấp Create access key để tạo\nThiết lập AWS CLI với access key id và access key vừa tạo bằng command aws configure Tải và cài đặt SAM CLI tại link\nClone lambda tại repo\nMở CMD tại repo vừa clone, tìm đến file template.yml cập nhật thông tin OpenSearch đã tạo ở bước 2.3 Sau khi cập nhật xong, chạy command sam build \u0026amp;\u0026amp; sam deploy\nKhi có thông báo Successfully created/updated stack - lambda in ap-southeast-1 là ta đã triển khai thành công.\nTa kiểm tra trên AWS "
},
{
	"uri": "//localhost:1313/vi/3-deployment/3.3-test/",
	"title": "Kiểm thử",
	"tags": [],
	"description": "",
	"content": "Tại đây chúng ta kiêm thử thành quả sau một hồi hì hục triển khai.\nMình sử dụng một phần thứ ba để kết nối đến RDS là DBeaver\nSau khi kết nối thành công, giao diện hiển thị như sau Tạo mới một database có tên là test Ấn Ctrl + J để tạo file script mới\nTạo một bảng user\nCREATE TABLE test.`user` (\rid INT auto_increment primary key,\rusername varchar(255) NULL,\rpassword varchar(255) NULL,\rfull_name varchar(255) NULL\r)\rENGINE=InnoDB\rDEFAULT CHARSET=utf8mb4\rCOLLATE=utf8mb4_0900_ai_ci; Tạo một record\nINSERT INTO test.`user` (username, password, full_name) VALUES (\u0026#39;huyvt\u0026#39;, \u0026#39;123\u0026#39;, \u0026#39;vu the huy\u0026#39;); Quay lại với CMD ở bước 3.1, chúng ta thấy có đoạn log Như vậy, là đoạn code đã lắng nghe thành công sự kiện tạo mới record (tương tự với sự kiện update và delete record) và đồng thời cũng đẩy được nội dung của record vào trong Kinesis.\nTiếp đến, ta kiểm tra log của Lambda.\nTại giao diện Lambda đã triển khai chọn tab Monitor, sau đó nhấp vào View CloudWatch logs Chọn đoạn log có thời gian tạo gần nhất Nhìn vào log ta thấy nội dung của record đã được thêm vào trong opensearch Ta kiểm tra url từ đoạn log WOW, Mọi thứ hoạt động thật mượt mà.\nLưu ý: Đây chỉ là một bài lab cơ bản cho bài toán Capture Data Change. Các bạn có thể tham khảo và cải thiện để phù hợp với các yêu cầu về nghiệp vụ, bảo mật\u0026hellip;\n"
},
{
	"uri": "//localhost:1313/vi/2-prepare/2.3-createopensearch/",
	"title": "Tạo OpenSearch service",
	"tags": [],
	"description": "",
	"content": "Tại ô tìm kiếm, tìm và chọn Amazon OpenSearch Service Tại giao diện, chọn Create domain Tại Domain name, điền cdc-opensearch\nMục Domain creation method, chọn Standard create Mục Templates, chọn Dev/Test\nMục Deployment options, chọn Domain without standby Mục Availability Zone(s), chọn 1-AZ\nEngine options, chọn version 6.8 Instance family: chọn General purpose\nInstance type: chọn t3.small.search\nNumber of nodes: nhập 1 Network, chọn Public access\nIP address type: chọn Dual-stack mode\nFine-grained access control, tick Enable fine-grained access control\nMaster user, chọn Create master user\nMaster username, điền admin\nMaster password và Confirm master password, điền Huyvt2609@ Access policy, chọn Only use fine-grained access control Lưu ý: Quá trình tạo service sẽ diễn ra khá lâu, khoảng 15 phút.\n"
},
{
	"uri": "//localhost:1313/vi/3-deployment/",
	"title": "Triển khai",
	"tags": [],
	"description": "",
	"content": "Tại phần này chúng ta bắt tay triển khai.\nNội dung Triển khai Python code lắng nghe MySQL event Triển khai Lambda Kiểm thử "
},
{
	"uri": "//localhost:1313/vi/4-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Xoá Kinesis Data Stream Truy cập vào trang Kinesis Chọn cdc-data-stream Chọn Actions -\u0026gt; Delete Xoá RDS Truy cập Amazon RDS Trên thanh điều hướng bên trái, chọn Databases Chọn DB Instance liên quan tới bài lab Click Actions. Click Delete Bỏ chọn Create final snapshot? và chọn I acknowledge that upon instance deletion, automated backups, including system snapshots and point-in-time recovery, will no longer be - available Gõ delete me vào ô trống. Click Delete Xoá EC2 Truy cập vào trang EC2 Chọn cdc-listener Chọn Instance state -\u0026gt; Terminate instance Xoá Opensearch Truy cập vào trang OpenSearch Chọn Delete Gõ delete và nhấp Xoá Xoá Lambda Mở CMD tạo repo clone, gõ sam delete và gõ Y nếu được yêu cầu Xoá VPC Truy cập vào trang VPC Chọn cdc-vpc Chọn Actions -\u0026gt; Delete VPC Gõ delete và nhấp Delete "
},
{
	"uri": "//localhost:1313/vi/2-prepare/2.4-createec2/",
	"title": "Tạo EC2",
	"tags": [],
	"description": "",
	"content": " Tạo Security Group cho EC2 Tại ô tìm kiếm, tìm và chọn \u0026ldquo;Security Groups\u0026rdquo; Tại giao diện vừa chuyển hướng, chọn Create security group Tại ô Security group name, nhập cdc-server-sg Tại ô VPC, chọn vpc-cdc Tại mục Inbound rules, chọn Add rule và điền các thông tin như sau:\nType: SSH Source: 0.0.0.0/0 Tạo EC2 Trên thanh điều hướng bên trái, chọn Instance -\u0026gt; Lanch Instances Name, nhập cdc-listener OS, chọn Ubuntu Tạo mới Key pair với name cdc-kp Tại mục Networking settings, chọn Edit Chọn thông tin đã tạo như trong hình Cuối cùng, chọn Lanch instance để tạo EC2\n"
},
{
	"uri": "//localhost:1313/vi/2-prepare/2.5-createkinesisdatastream/",
	"title": "Tạo Kinesis Data Stream",
	"tags": [],
	"description": "",
	"content": "Tại ô tìm kiếm, tìm và chọn Kinesis Data Streams Tại giao diện vừa chuyển hướng, chọn Create data stream Tại mục Data stream name, nhập cdc-data-stream Sau đó chọn Create data stream để tạo "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]